/* $Id: lists.h.in,v 1.4 2007/04/25 22:35:33 luis Exp $
 * Author: Luis Colorado <lc@luiscoloradosistemas.com>
 * Date: Mon Jul 18 17:21:22 CEST 2005
 *
 * Disclaimer:
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/* Do not include anything BEFORE the line below, as it would not be
 * protected against double inclusion from other files
 */
#ifndef LISTS_H
#define LISTS_H

static char LISTS_H_RCSId[] = "\n$Id: lists.h.in,v 1.4 2007/04/25 22:35:33 luis Exp $\n";

#define LISTS_H_PACKAGE_NAME "@PACKAGE_NAME@"
#define LISTS_H_PACKAGE_VERSION "@PACKAGE_VERSION@"
#define LISTS_H_PACKAGE_STRING "@PACKAGE_STRING@"

/* constants */

/* types */
typedef struct LNODE_S {
		struct LNODE_S *prev;
		struct LNODE_S *next;
} LNODE_T, *LNODE_P;

/* definitions */

#ifndef OFFSETOF
#define OFFSETOF(T,f) ((char*)&(((T*)0)->f)-(char*)0)
#endif

#define LIST_INIT(L) do{(L)->prev=(L)->next=0;}while(0)
#define LIST_DECLARE(L) LNODE_T L={.next=0,.prev=0}

#define LIST_FIRST(L) ((L)->next)
#define LIST_LAST(L) ((L)->prev)
#define LIST_NEXT(p) LIST_FIRST(p)
#define LIST_PREV(p) LIST_LAST(p)

#define LIST_ATEOL(p) (!(p)->next)
#define LIST_ATBOL(p) (!(p)->prev)
#define LIST_FOREACH(p,L) for(p=LIST_FIRST(L);(p);(p)=LIST_NEXT(p))
#define LIST_FORBACK(p,L) for(p=LIST_LAST(L);(p);p=LIST_PREV(p))

#define LIST_ELEMENT(p,T,f) ((T*)((p)?((char*)(p)-OFFSETOF(T,f)):0))
#define LIST_FIRST_ELEMENT(L,T,f) LIST_ELEMENT(LIST_FIRST(L),T,f)
#define LIST_LAST_ELEMENT(L,T,f) LIST_ELEMENT(LIST_LAST(L),T,f)
#define LIST_NEXT_ELEMENT(p,T,f) LIST_ELEMENT(LIST_NEXT(&(p)->f),T,f)
#define LIST_PREV_ELEMENT(p,T,f) LIST_ELEMENT(LIST_PREV(&(p)->f),T,f)

#define LIST_FOREACH_ELEMENT(p,L,T,f) for(p=LIST_FIRST_ELEMENT((L),T,f);(p);p=LIST_NEXT_ELEMENT((p),T,f))
#define LIST_FORBACK_ELEMENT(p,L,T,f) for(p=LIST_LAST_ELEMENT((L),T,f);(p);p=LIST_PREV_ELEMENT((p),T,f))

#define LIST_EMPTY(L) (!(L)->next)

#define LIST_INSERT(L,p) do{\
    if (LIST_EMPTY(L))\
        (L)->prev = (L)->next = (p);\
    else{\
        (p)->next=(L)->next;\
        (p)->prev=0;\
        (L)->next=(p);\
    }\
}while(0)
#define LIST_APPEND(L,p) do{\
    if (LIST_EMPTY(L))\
        (L)->prev = (L)->next = (p);\
    else{\
        (p)->prev=(L)->prev;\
        (p)->next=0;\
        (L)->prev=(p);\
    }\
}while(0)
#define LIST_UNLINK(L,p) do{\
    if((p)->next)(p)->next->prev=(p)->prev;\
    else (L)->prev=(p)->prev;\
    if((p)->prev)(p)->prev->next=(p)->next;\
    else (L)->next=(p)->next;\
}while(0)
#define LIST_INSERT_ELEMENT(L,p,T,f) LIST_INSERT(L,&(p)->f)
#define LIST_APPEND_ELEMENT(L,p,T,f) LIST_APPEND(L,&(p)->f)
#define LIST_UNLINK_ELEMENT(L,p,T,f) LIST_UNLINK(L,&(p)->f)

#endif /* LISTS_H */
/* Do not include anything AFTER the line above, as it would not be
 * protected against double inclusion from other files.
 */
/* $Id: lists.h.in,v 1.4 2007/04/25 22:35:33 luis Exp $ */
